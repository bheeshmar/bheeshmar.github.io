<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Simple Thoughts]]></title>
  <link href="http://bheeshmar.github.io/atom.xml" rel="self"/>
  <link href="http://bheeshmar.github.io/"/>
  <updated>2015-01-11T20:16:02-06:00</updated>
  <id>http://bheeshmar.github.io/</id>
  <author>
    <name><![CDATA[Bheeshmar Redheendran]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The path toward HATEOAS]]></title>
    <link href="http://bheeshmar.github.io/blog/2015/01/11/the-path-toward-hateoas/"/>
    <updated>2015-01-11T19:15:47-06:00</updated>
    <id>http://bheeshmar.github.io/blog/2015/01/11/the-path-toward-hateoas</id>
    <content type="html"><![CDATA[<p>We were discussing API design at work. Specifically, we were debating the
merits of adding a boolean attribute to a JSON object. Now, if you know me, you
know how much I hate booleans (more on that another time), so I argued against
it. The design consideration in question was to add a way to conditionally hide
the &ldquo;like&rdquo; button in the UI from the author of a post. The request was to add
an attribute to let the client know whether the current user was the author of
the post:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span> <span class="nx">id</span><span class="o">:</span> <span class="mi">12</span><span class="p">,</span> <span class="nx">title</span><span class="o">:</span> <span class="s2">&quot;Awesome post&quot;</span><span class="p">,</span> <span class="p">...,</span> <span class="nx">author</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then the client would check that attribute in Javascript and take the
appropriate action:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">addLikeButton</span><span class="p">(</span><span class="s1">&#39;/post/&#39;</span> <span class="o">+</span> <span class="nx">model</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;/like&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Authors can&#39;t like their own posts</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">model</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;author&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;like-button&#39;</span><span class="p">).</span><span class="nx">hide</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;like-button&#39;</span><span class="p">).</span><span class="nx">show</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>One problem I have with this is that it delegates business rules to the client.
The server already knows whether or not to allow a &ldquo;like&rdquo; to be applied or not,
the client is trying to convey that nicely to the user. Another problem I have
is that it is using an indirect test: we want the user to not be able to like
something, and the fact that that applies to an author is just a business rule
for today. So, why not make the attribute more explicit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span> <span class="nx">id</span><span class="o">:</span> <span class="mi">12</span><span class="p">,</span> <span class="nx">title</span><span class="o">:</span> <span class="s2">&quot;Awesome post&quot;</span><span class="p">,</span> <span class="p">...,</span> <span class="nx">likeable</span><span class="o">:</span> <span class="kc">false</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the client would use more or less the same code as before, but with better clarity:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">addLikeButton</span><span class="p">(</span><span class="s1">&#39;/post/&#39;</span> <span class="o">+</span> <span class="nx">model</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;/like&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">model</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;likeable&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;like-button&#39;</span><span class="p">).</span><span class="nx">show</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;like-button&#39;</span><span class="p">).</span><span class="nx">hide</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Better, but again, I don&rsquo;t like that boolean! I would much rather have some
sort of enumerated type, as this general problem is one of exposing
capabilities:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span> <span class="nx">id</span><span class="o">:</span> <span class="mi">12</span><span class="p">,</span> <span class="nx">title</span><span class="o">:</span> <span class="s2">&quot;Awesome post&quot;</span><span class="p">,</span> <span class="p">...,</span> <span class="nx">capabilities</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;likeable&quot;</span><span class="p">,</span> <span class="s2">&quot;commentable&quot;</span><span class="p">,</span> <span class="p">...]</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">addLikeButton</span><span class="p">(</span><span class="s1">&#39;/post/&#39;</span> <span class="o">+</span> <span class="nx">model</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;/like&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span><span class="nx">model</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;capabilities&#39;</span><span class="p">),</span> <span class="s1">&#39;likeable&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;like-button&#39;</span><span class="p">).</span><span class="nx">show</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;like-button&#39;</span><span class="p">).</span><span class="nx">hide</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, this has its own drawbacks: the fact that things are
<a href="http://c2.com/cgi/wiki?StringlyTyped">&ldquo;stringly-typed&rdquo;</a> is not great, and you
still need to have a boolean test.</p>

<p>After some discussion, I thought about how it would be nice if the server sent
down the mechanism for the action as the flag. Well, isn&rsquo;t that
<a href="http://en.wikipedia.org/wiki/HATEOAS">HATEOAS</a>? Why not return this from the
API:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span> <span class="nx">id</span><span class="o">:</span> <span class="mi">12</span><span class="p">,</span> <span class="nx">title</span><span class="o">:</span> <span class="s2">&quot;Awesome post&quot;</span><span class="p">,</span> <span class="p">...,</span> <span class="nx">like</span><span class="o">:</span> <span class="p">{</span> <span class="nx">rel</span><span class="o">:</span> <span class="s2">&quot;like&quot;</span><span class="p">,</span> <span class="nx">href</span><span class="o">:</span> <span class="s2">&quot;/post/12/like&quot;</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">model</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;like&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">addLikeButton</span><span class="p">(</span><span class="nx">model</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;like&#39;</span><span class="p">)[</span><span class="s1">&#39;href&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I like that the server returns the URL now and that we don&rsquo;t have hard-coded
URLs in the client. The presence or absence of the ability to like is used to
key the one conditional which adds the button. I&rsquo;m sure there are some
drawbacks here, but so far this looks very promising!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing an Octopress theme]]></title>
    <link href="http://bheeshmar.github.io/blog/2015/01/04/installing-an-octopress-theme/"/>
    <updated>2015-01-04T19:28:47-06:00</updated>
    <id>http://bheeshmar.github.io/blog/2015/01/04/installing-an-octopress-theme</id>
    <content type="html"><![CDATA[<p>Installing a theme in Octopress is trivial. After browsing the <a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">theme catalog</a>, I chose the &ldquo;slash&rdquo; theme because I prefer its sans-serif fonts and clean layout. Here&rsquo;s how I installed it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd git/blog # where my octopress repo is
</span><span class='line'>$ git clone git://github.com/tommy351/Octopress-Theme-Slash.git .themes/slash
</span><span class='line'>$ rake install['slash']
</span><span class='line'>$ rake generate</span></code></pre></td></tr></table></div></figure>


<p>Commit your changes if you are happy and you are done!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding comments and analytics to the blog]]></title>
    <link href="http://bheeshmar.github.io/blog/2015/01/02/adding-comments-and-analytics-to-the-blog/"/>
    <updated>2015-01-02T20:37:26-06:00</updated>
    <id>http://bheeshmar.github.io/blog/2015/01/02/adding-comments-and-analytics-to-the-blog</id>
    <content type="html"><![CDATA[<p>Adding Disqus and Google Analytics to Octopress is pretty trivial. I found entries in the <code>_config.yml</code> file for <code>google_analytics_tracking_id</code> and <code>disqus_short_name</code> that needed values. I signed into Disqus and clicked &ldquo;Add Disqus to your site&rdquo; and filled out the fields. I then put the corresponding short name into the Octopress config file.</p>

<p>Google Analytics was similarly easy: Go to <a href="https://www.google.com/analytics">https://www.google.com/analytics</a> and fill out the forms to generate a tracking code, then paste that code into the Octopress config file.</p>

<p>Redeploy the site and you are good to go! Easy peasy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up this blog]]></title>
    <link href="http://bheeshmar.github.io/blog/2015/01/01/setting-up-this-blog/"/>
    <updated>2015-01-01T22:24:21-06:00</updated>
    <id>http://bheeshmar.github.io/blog/2015/01/01/setting-up-this-blog</id>
    <content type="html"><![CDATA[<p>For 2015, I&rsquo;ve decided to start publishing the information that I&rsquo;ve digested instead of just spreading it haphazardly via word-of-mouth or retweeting links in social media. To that end, I have decided to setup a blog using Github Pages.</p>

<p>I run a stock Ubuntu 14.04 desktop system at home, so I opened up Chrome and contemplated my options for blogging engines. My preliminary research found Jekyll, Octopress, Middleman, and Nanoc. I opted to stay simple and go with Octopress as my first attempt, since that came well recommended. Here&rsquo;s how I set everything up.</p>

<!-- more -->


<p>I needed to install Ruby on my system and just to try something different (I use RVM at work) I opted to use chruby and ruby-install:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># chruby</span>
</span><span class='line'>wget -O chruby-0.3.9.tar.gz https://github.com/postmodern/chruby/archive/v0.3.9.tar.gz
</span><span class='line'>tar -xzvf chruby-0.3.9.tar.gz
</span><span class='line'><span class="nb">cd </span>chruby-0.3.9/
</span><span class='line'>sudo make install
</span><span class='line'>
</span><span class='line'><span class="c"># ruby-install</span>
</span><span class='line'>wget -O ruby-install-0.5.0.tar.gz https://github.com/postmodern/ruby-install/archive/v0.5.0.tar.gz
</span><span class='line'>tar -xzvf ruby-install-0.5.0.tar.gz
</span><span class='line'><span class="nb">cd </span>ruby-install-0.5.0/
</span><span class='line'>sudo make install
</span><span class='line'>
</span><span class='line'><span class="c"># install latest ruby (2.1.3)</span>
</span><span class='line'>ruby-install ruby
</span><span class='line'>
</span><span class='line'><span class="c"># use it</span>
</span><span class='line'>chruby 2.1.3
</span><span class='line'>
</span><span class='line'><span class="c"># setup bash to autoload it</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;source /usr/local/share/chruby/chruby.sh&quot;</span> &gt;&gt; ~/.bashrc
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;source /usr/local/share/chruby/auto.sh&quot;</span> &gt;&gt; ~/.bashrc
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;chruby 2.1.3&quot;</span> &gt;&gt; ~/.bashrc
</span></code></pre></td></tr></table></div></figure>


<p>I installed Octopress by cloning the repo and running the commands in its tutorial and configured it to deploy to GitHub Pages.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'><span class="nb">cd </span>octopress
</span><span class='line'>gem install bundler
</span><span class='line'>bundle install
</span><span class='line'>rake install
</span><span class='line'>rake setup_github_pages
</span><span class='line'>rake generate
</span><span class='line'>rake preview
</span></code></pre></td></tr></table></div></figure>


<p>For what it&rsquo;s worth, I could not get the <code>rake preview</code> to work until I installed a Javascript runtime. I chose to install Node.js using Ubuntu&rsquo;s package manager:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install nodejs
</span></code></pre></td></tr></table></div></figure>


<p>I made some minor tweaks to the generated <code>_config.yml</code> file to customize it for my name and title, then I generated this blog post:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake new_post<span class="o">[</span><span class="s2">&quot;Setting up this blog&quot;</span><span class="o">]</span>
</span><span class='line'>vim <span class="nb">source</span>/_posts/2015-01-01-setting-up-this-blog.markdown
</span></code></pre></td></tr></table></div></figure>


<p>Lastly, I committed my changes and published the post.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git add sass/ <span class="nb">source</span>/
</span><span class='line'>git commit -a
</span><span class='line'>git push --set-upstream origin <span class="nb">source</span>
</span><span class='line'>rake deploy
</span></code></pre></td></tr></table></div></figure>


<p>With this, my repo at <code>bheeshmar/bheeshmar.github.io</code> has the generated site in its <code>master</code> branch and the source files in its <code>source</code> branch. Next steps are to customize the styling and setup commenting.</p>
]]></content>
  </entry>
  
</feed>
